name: "Node steps"
description: "Composite Github Action to provides opinionated NodeJS steps"
branding:
  icon: "hexagon"
  color: "green"

inputs:
  package-manager:
    description: "Used to specify a package manager¬µ. Supported values: 'yarn'"
    default: "yarn"
  build:
    description: Build parameters.
    default: "build"
  checks:
    description: "Optional flag to enable check steps."
  code-ql:
    description: "Code QL analysis language. See https://github.com/github/codeql-action"
    default: "typescript"
  test:
    description: "Optional flag to enable test. See https://github.com/github/codeql-action"
    default: true
  coverage:
    description: "Optional flag to enable coverage report. See https://github.com/codecov/codecov-action"

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v2

    - id: nvm
      shell: bash
      run: echo ::set-output name=NVMRC::$(cat .nvmrc)

    - uses: actions/setup-node@v2.4.0
      id: setup-node
      with:
        node-version: "${{ steps.nvm.outputs.NVMRC }}"
        cache: ${{ inputs.package-manager }}
        cache-dependency-path: "**/yarn.lock"

    - name: ‚öôÔ∏è Install Dependencies
      # FIXME: https://github.com/actions/runner/issues/834 (if: steps.setup-node.outputs.cache-hit != 'true')
      shell: bash
      run: |
        if [ "${{ steps.setup-node.outputs.cache-hit }}" != "true" ]; then
          yarn install --frozen-lockfile;
        fi

    - name: üõ°Ô∏è CodeQL Analysis
      # FIXME: https://github.com/actions/runner/issues/834 (if: inputs.checks && inputs.code-ql)
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ inputs.code-ql }}
    - uses: github/codeql-action/analyze@v1
      # FIXME: https://github.com/actions/runner/issues/834 (if: inputs.checks && inputs.code-ql)

    - id: yarn-installed-packages
      # FIXME: https://github.com/actions/runner/issues/834 (if: inputs.build)
      shell: bash
      run: |
        echo ::set-output name=gatsby::$([[ `yarn list --pattern "gatsby" --depth=1 | grep " gatsby@"` ]] && echo "true" || echo "false")

    - name: ‚ôªÔ∏è Gatsby cache
      # FIXME: https://github.com/actions/runner/issues/834 (if: inputs.build && 'steps.yarn-installed-packages.outputs.gatsby)
      uses: actions/cache@v2.1.6
      id: gatsby-cache
      with:
        path: |
          .cache
          public
        key: ${{ runner.os }}-cache-gatsby-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-cache-gatsby-

    - id: prepare-build
      # FIXME: https://github.com/actions/runner/issues/834 (if: inputs.build)
      shell: bash
      run: |
        BUILD_INPUT=$(cat <<-END
            ${{ inputs.build }}
        END
        )
        BUILD_INPUT=$(echo $BUILD_INPUT | sed 's/ *$//g')

        if [ -z "$BUILD_INPUT" ]; then
            exit 0;
        fi

        # Pure string
        if echo "$BUILD_INPUT" | grep -c "^[_:a-zA-Z0-9]\+$" > /dev/null; then            
            echo ::set-output name=env::{}

            BUILD_COMMAND=$( echo "\"$BUILD_INPUT\"" | jq '.' )
            if [ "$BUILD_COMMAND" == \""false\"" ]; then
              echo ::set-output name=command::
            else
              echo ::set-output name=command::$BUILD_COMMAND
            fi

            exit 0;
        fi

        CHECK_JSON=$( { echo "$BUILD_INPUT" | jq empty; } 2>&1 )
        if [ ! $? -eq 0 ] ; then
            echo -e "Given \"build\" input is not a valid JSON string: $CHECK_JSON.\n\"$BUILD_INPUT\""
            exit 1;
        fi

        # Build input is a JSON string
        if echo "$BUILD_INPUT" | jq 'type == "string"' | grep -c "true" > /dev/null; then

            BUILD_COMMAND=$( echo "$BUILD_INPUT" | jq '.' )
            echo ::set-output name=command::$BUILD_COMMAND
            echo ::set-output name=env::{}
            exit 0;

        fi

        # Build input is a JSON object
        if echo "$BUILD_INPUT" | jq 'type == "object"' | grep -c "true" > /dev/null; then

            BUILD_COMMAND=$( echo "$BUILD_INPUT" | jq ' . | if has("command") then .command else "build" end' )
            echo ::set-output name=command::$BUILD_COMMAND

            BUILD_ENV=$( echo "$BUILD_INPUT" | jq ' . | if has("env") then .env else {} end' )
            echo ::set-output name=env::$BUILD_ENV
            exit 0;

        fi

        echo -e "Given \"build\" input is not a string nor an object.\n$BUILD_INPUT"
        exit 1;

    - name: üèóÔ∏è Build
      shell: bash
      # FIXME: https://github.com/actions/runner/issues/834 (if: steps.prepare-build.command)
      env: ${{ fromJSON(steps.prepare-build.outputs.env) }}
      run: |
        if [ -n "${{ steps.prepare-build.outputs.command }}" ]; then
          yarn ${{ steps.prepare-build.outputs.command }}
        fi

    - name: üëï Lint
      # FIXME: https://github.com/actions/runner/issues/834 (if: inputs.checks && inputs.lint)
      shell: bash
      run: |
        if [ "${{ inputs.checks }}" = "true" ] && [ "${{ inputs.lint }}" = "true" ]; then
          yarn lint
        fi

    - name: ‚ôªÔ∏è Get Jest cache dir
      # FIXME: https://github.com/actions/runner/issues/834 (if: inputs.checks && inputs.test)
      id: jest-cache-dir-path
      shell: bash
      run: |
        if [ "${{ inputs.checks }}" = "true" ] && [ "${{ inputs.test }}" = "true" ]; then
          JEST_CACHE_DIR=$(yarn jest --showConfig | grep -oP '(?<="cacheDirectory": ")[^"]+(?=")')
          echo "::set-output name=dir::$JEST_CACHE_DIR"
        else
          echo "::set-output name=dir::/tmp/unknown"
        fi

    - name: ‚ôªÔ∏è Test cache
      # FIXME: https://github.com/actions/runner/issues/834 (if: inputs.checks && inputs.test)
      uses: actions/cache@v2.1.6
      with:
        path: ${{ steps.jest-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-test-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-test-

    - name: üß™ Test
      # FIXME: https://github.com/actions/runner/issues/834 (if: inputs.checks && inputs.test)
      shell: bash
      env:
        CI: true
      run: |
        if [ "${{ inputs.checks }}" = "true" ] && [ "${{ inputs.test }}" = "true" ]; then
          yarn test:ci
        fi

    - name: üìä Code coverage
      # FIXME: https://github.com/actions/runner/issues/834 (if: inputs.checks && inputs.coverage)
      uses: codecov/codecov-action@v2.1.0
